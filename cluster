#!/bin/sh

##
if [ $1 = "help" ] || [ -z "$2" ]; then
  echo "Usage: cluster [command] [config.file]"
  echo ""
  echo "create  -- create a simple cluster"
  echo "destroy -- destroy a simple cluster"
  echo "dns-reg -- register master dns record"
  echo "dns-unreg -- unregister master dns record"
fi

if [ ! -z "$2" ]; then
    source $2
    echo "Loaded config for $DOMAIN"
fi

##
if [ $1 = "create" ]; then
  # Add and select project context
  hetzner-kube context add $PROJECT_CONTEXT
  hetzner-kube context use $PROJECT_CONTEXT

  ## Create and configure cluster
  hetzner-kube cluster create $CLUSTER_CREATE_EXTRA_ARGS --name $CLUSTER_NAME --ssh-key $SSH_KEY_NAME
  hetzner-kube cluster kubeconfig $CLUSTER_NAME

  # Configure DNS
  ./cluster dns-reg $2
fi

##
if [ $1 = "destroy" ]; then
  # Add and select project context
  hetzner-kube context use $PROJECT_CONTEXT

  # Remove DNS entries
  ./cluster dns-unreg $2

  # destroy cluster
  hetzner-kube cluster delete $CLUSTER_NAME
fi

##
if [ $1 = "dns-unreg" ]; then
  # Get master IP
  MASTER_IP=`hetzner-kube cluster master-ip $CLUSTER_NAME`
  
  # Remove DNS entries
  export RESPONSE=`curl -s "https://api.zeit.co/v2/domains/$DOMAIN/records" -H "Authorization: Bearer $ZEIT_TOKEN"` 
  # echo $MASTER_IP
  # echo $RESPONSE
  export RECORD_ID=`echo $RESPONSE | jq --arg master_ip $MASTER_IP -r '.records[] | select(.value==$master_ip) | .id'`
  echo $RECORD_ID
  now dns rm $RECORD_ID
fi

##
if [ $1 = "dns-reg" ]; then
  # Get master IP
  MASTER_IP=`hetzner-kube cluster master-ip $CLUSTER_NAME`
  
  # Add DNS entry
  now dns add $DOMAIN master A $MASTER_IP
fi

##
if [ $1 = "master-ip" ]; then
  # Get master IP
  hetzner-kube cluster master-ip $CLUSTER_NAME
fi
